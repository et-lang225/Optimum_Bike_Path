def find_nearest(series, target_coord):
    distances = series.apply(lambda coord: geodesic(coord, target_coord).miles)
    min_distance = distances.min()
    return distances[distances == min_distance].index.tolist()

def fast_find_nearest(series, target_coord):
    arr = np.array(series.tolist())
    dists = np.sqrt((arr[:,0] - target_coord[0])**2 + (arr[:,1] - target_coord[1])**2)
    min_idx = np.argmin(dists)
    return [series.index[min_idx]]

def find_river_start(row):
    house_index = fast_find_nearest(river_network['start'], row['house_coords'])
    return river_network['start'].iloc[house_index]

def find_river_end(row):
    work_index = fast_find_nearest(river_network['end'], row['work_coords'])
    return river_network['end'].iloc[work_index]

def find_river_path(row):
    start = row['route_start']
    end = row['route_end']
    row['path'].append(start)
    if row['path'][-1] != end:
        while row['path'][-1] != end:
            path_point = row['path'][-1]
            path_prev = row['path'][0:-1]
            mask = (river_network['start'] == path_point) & (~river_network['end'].isin(path_prev))
            index = fast_find_nearest(river_network[mask]['end'],end)
            row['path'].append(river_network.iloc[index[0]]['start'])
    return row['path']

house_work_pairs['route_start'] = house_work_pairs.apply(find_river_start, axis=1)
house_work_pairs['route_end'] = house_work_pairs.apply(find_river_end, axis=1)

