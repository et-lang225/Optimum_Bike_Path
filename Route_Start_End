def find_nearest(series, target_coord):
    distances = series.apply(lambda coord: geodesic(coord, target_coord).miles)
    min_distance = distances.min()
    return distances[distances == min_distance].index.tolist()

def fast_find_nearest(series, target_coord):
    arr = np.array(series.tolist())
    dists = np.sqrt((arr[:,0] - target_coord[0])**2 + (arr[:,1] - target_coord[1])**2)
    min_idx = np.argmin(dists)
    return [series.index[min_idx]]

def find_river_start(row):
    house_index = fast_find_nearest(river_network['start'], row['house_coords'])
    return river_network['start'].iloc[house_index]

def find_river_end(row):
    work_index = fast_find_nearest(river_network['end'], row['work_coords'])
    return river_network['end'].iloc[work_index]

house_work_pairs['route_start'] = house_work_pairs.apply(find_river_start, axis=1)
house_work_pairs['route_end'] = house_work_pairs.apply(find_river_end, axis=1)

# I know this works but it is extremely slow and defeats the purpose of storing these routes in a dataframe.
# However, if I restricted the df to a subset of rows, I was able to use this code to troubleshoot a lot of issues such as creating multiple paths to choose from (such as a Dijkstra algorithm)...
# and finding out that I had to round GPS coordinates to 6 decimal places in order to make two connecting line segments have identical coordinates. 
for r in range(len(house_work_pairs)):
    house_work_pairs['path'] = [[] for _ in range(len(house_work_pairs))]
    start = house_work_pairs['route_start'][r]
    end = house_work_pairs['route_end'][r]
    route = []
    path_dict = {1:[], 2:[], 3:[]}
    for i in list(path_dict.keys()):
        path_dict[i].append(start)
        exlcude_list = [item for tup in path_dict.values() for item in tup]
        while path_dict[i][-1] != end:
            path_point = path_dict[i][-1]
            path_prev = path_dict[i][0:-1]
            mask = (river_network['start'] == path_point) & (river_network['end'] != path_point) & (~river_network['end'].isin(path_prev)) & (~river_network['end'].isin(exlcude_list))
            if not mask.any():
                break
            index = fast_find_nearest(river_network[mask]['end'],end)
            path_dict[i].append(river_network.iloc[index[0]]['end'])
        exlcude_list = [item for tup in path_dict.values() for item in tup]
        if end in path_dict[i]:
            route = path_dict[i]
    house_work_pairs['path'][r] = route

# The code I found to work came from unpacking what networkx does behind the scenes (below)
# basically the key is to create an adjaceny list and a tuple of distance and node queue of all possible paths, which I thought would acually make it slower but it does not
# I thought I could take the minimum distance of the end node to the node adjacent to the next node in the list (beginning with the start coordinate) and it would lead to the shortest path
# many problems arose with that idea and the code became more and more complicated
house_work_pairs['path'] = [[] for _ in range(len(house_work_pairs))]
from collections import defaultdict
import heapq

adj_weighted = defaultdict(list)
for idx, row in river_network.iterrows():
    adj_weighted[row['start']].append((row['end'], row['distance']))

def dijkstra_shortest_path(adj, start, end):
    heap = [(0, [start])]  # (cumulative_distance, path)
    visited = set()
    while heap:
        cost, path = heapq.heappop(heap)
        node = path[-1]
        if node == end:
            return path
        if node in visited:
            continue
        visited.add(node)
        for neighbor, weight in adj[node]:
            if neighbor not in visited:
                heapq.heappush(heap, (cost + weight, path + [neighbor]))
    return []

def get_dijkstra_path(row):
    return dijkstra_shortest_path(adj_weighted, row['route_start'], row['route_end'])

house_work_pairs['path'] = house_work_pairs.apply(get_dijkstra_path, axis=1)
# the Dijkstra algorithm ran in 10.9s on my machine
# This still did not result in a path for all rows of the df, but that might be due to more coordinate rounding issues, I will have to explore further

